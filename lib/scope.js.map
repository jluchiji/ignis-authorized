{"version":3,"sources":["scope.js"],"names":[],"mappings":";;;;;;;;;;;;;qBA4DwB,KAAK;;;;;wBArDL,UAAU;;;;0BACV,YAAY;;;;yBAEA,YAAY;;;;;AAKzC,IAAM,QAAQ,GAAG,uBAAO,uBAAuB,CAAC,CAAC;;;;;;;;;;;;AAWjD,SAAS,QAAQ,CAAC,KAAK,EAAE,IAAI,EAAE;AACpC,SAAO,4BAAY,UAAS,GAAG,EAAE;AAC/B,QAAI,SAAS,GAAG,KAAK,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;;;AAG1C,QAAI,CAAC,SAAS,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;AACxC,aAAO,sBAAS,OAAO,CAAC,IAAI,CAAC,CAAC;KAC/B;;;AAGD,WAAO,SAAS,CAAC,MAAM,CAAC,UAAC,IAAI,EAAE,IAAI,EAAK;;AAEtC,aAAO,IAAI,CAAC,IAAI,CAAC,UAAA,IAAI,EAAI;AACvB,YAAI,IAAI,EAAE;AAAE,iBAAO,IAAI,CAAC;SAAE;AAC1B,YAAI,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;AAC1B,iBAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;SAC9C;AACD,eAAO,IAAI,CAAC;OACb,CAAC,CAAC;KAEJ,EAAE,sBAAS,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,UAAA,IAAI;aAAI,IAAI,IAAI,IAAI;KAAA,CAAC,CAAC;GACvD,CAAC,CAAC;CACJ;;;;;;;;;;;;;AAYc,SAAS,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE;;;;;AACnD,MAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC;;;AAG3B,MAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;AACpB,SAAK,CAAC,GAAG,CAAC,IAAI,EAAE,EAAG,CAAC,CAAC;AACrB,4BAAW,MAAM,CAAC,IAAI,EAAE,UAAC,GAAG,EAAE,IAAI,EAAK;AACrC,cAAQ,QAAO,IAAI,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;KACjC,CAAC,CAAC;GACJ;;AAED,OAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC;CAC5D","file":"scope.js","sourcesContent":["/**\n * access/scope.js\n *\n * @author  Denis Luchkin-Zhou <denis@ricepo.com>\n * @license MIT\n */\n\nimport Bluebird    from 'bluebird';\nimport Authorized  from 'authorized';\n\nimport { unpromisify, symbol } from 'ignis-util';\n\n/*!\n * Symbols used by scope.js\n */\nexport const __scopes = symbol('Ignis::access::scopes');\n\n\n/**\n * getScope(2)\n *\n * @description                Creates a function that retrieves the scope.\n * @param          {ignis}     The Ignis app instance.\n * @param          {name}      Name of the scope to retrieve.\n * @return         {Function}  Function that retrieves the scope.\n */\nexport function getScope(ignis, name) {\n  return unpromisify(function(req) {\n    let callbacks = ignis[__scopes].get(name);\n\n    /* Deny if there are no scope callbacks */\n    if (!callbacks || callbacks.length === 0) {\n      return Bluebird.resolve(null);\n    }\n\n    /* Start trying */\n    return callbacks.reduce((last, next) => {\n\n      return last.then(data => {\n        if (data) { return data; }\n        if (req.params[next.param]) {\n          return next.callback(req.params[next.param]);\n        }\n        return null;\n      });\n\n    }, Bluebird.resolve(null)).then(data => data || null);\n  });\n}\n\n/**\n * scope(3)\n *\n * @description                Specifies the callback to retrieve an entity.\n * @param          {name}      Name of the entity.\n * @param          {param}     URL param that contains ID used for the search.\n * @param          {callback}  Promise-generating callback to retrieve the\n *                             entity using the specified ID.\n * @return         {this}      Namespace for further chaining.\n */\nexport default function scope(name, param, callback) {\n  let store = this[__scopes];\n\n  /* Create a scope if it is not already present */\n  if (!store.has(name)) {\n    store.set(name, [ ]);\n    Authorized.entity(name, (req, done) => {\n      getScope(this, name)(req, done);\n    });\n  }\n\n  store.get(name).push({ param: param, callback: callback });\n}\n"],"sourceRoot":"/source/"}