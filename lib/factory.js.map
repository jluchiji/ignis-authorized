{"version":3,"sources":["factory.js"],"names":[],"mappings":";;;;;;;;;;;;qBAkBwB,aAAa;;;;;;;;;sBAXb,QAAQ;;;;0BACR,YAAY;;;;;;;;;;;;;AAUrB,SAAS,aAAa,CAAC,KAAK,EAAE,IAAI,EAAE;AAClD,MAAI,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,UAAU,CAAC;;;AAG3D,MAAI,CAAC,MAAM,EAAE;AAAE,WAAO,IAAI,CAAC;GAAE;;;AAG7B,QAAM,GAAG,oBAAE,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;;;AAG7B,SAAO,wBAAW,GAAG,MAAA,6CAAI,MAAM,EAAC,CAAC;CACjC","file":"factory.js","sourcesContent":["/**\n * factory.js\n *\n * @author  Denis Luchkin-Zhou <denis@ricepo.com>\n * @license MIT\n */\n\nimport _           from 'lodash';\nimport Authorized  from 'authorized';\n\n/**\n* accessFactory(2)\n*\n* @description                Factory for instantiating access control mware.\n* @param          {ignis}     Ignis.js instance.\n* @param          {meta}      Request handler metadata.\n* @return         {Function}  Express middleware that authorizes the request.\n*/\nexport default function accessFactory(ignis, meta) {\n let action = meta.access || meta.action || meta.permission;\n\n /* Do not add anything if action is not specified */\n if (!action) { return null; }\n\n /* Action can be either a string or an array */\n action = _.flatten([action]);\n\n /* Create an authorization middleware */\n return Authorized.can(...action);\n}\n"],"sourceRoot":"/source/"}